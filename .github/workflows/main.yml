name: Build LibXray for Android and iOS

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-android:
    name: Build Android
    runs-on: ubuntu-latest
    steps:
    - name: Checkout libXray
      uses: actions/checkout@v4
      with:
        path: libXray

    - name: Checkout Xray-core
      uses: actions/checkout@v4
      with:
        repository: XTLS/Xray-core
        path: Xray-core

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        cache-dependency-path: |
          libXray/go.sum
          Xray-core/go.sum

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Set up Java JDK
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Setup Android SDK
      uses: android-actions/setup-android@v3

    - name: Install Android NDK 29
      run: |
        sdkmanager "ndk;29.0.13599879"
        echo "ANDROID_NDK_ROOT=${ANDROID_SDK_ROOT}/ndk/29.0.13599879" >> $GITHUB_ENV
        echo "ANDROID_NDK_HOME=${ANDROID_SDK_ROOT}/ndk/29.0.13599879" >> $GITHUB_ENV
        echo "NDK_ROOT=${ANDROID_SDK_ROOT}/ndk/29.0.13599879" >> $GITHUB_ENV

    - name: Install gomobile
      run: |
        go install golang.org/x/mobile/cmd/gomobile@latest
        # Ensure clean gomobile initialization with correct NDK
        gomobile clean
        ANDROID_NDK_HOME=${ANDROID_SDK_ROOT}/ndk/29.0.13599879 gomobile init

    - name: Configure 16KB page support
      run: |
        # Set environment variables for 16KB page alignment
        echo "CGO_CFLAGS=-DPAGE_SIZE=16384 -DMAX_PAGE_SIZE=16384" >> $GITHUB_ENV
        echo "CGO_CPPFLAGS=-DPAGE_SIZE=16384 -DMAX_PAGE_SIZE=16384" >> $GITHUB_ENV
        echo "CGO_LDFLAGS=-Wl,-z,max-page-size=16384" >> $GITHUB_ENV
        # Ensure we're using the correct NDK
        echo "ANDROID_NDK_HOME=${ANDROID_SDK_ROOT}/ndk/29.0.13599879" >> $GITHUB_ENV

    - name: Build Android with 16KB page support
      working-directory: libXray
      env:
        # Additional build environment for 16KB pages
        CGO_ENABLED: 1
        GOOS: android
        # Ensure proper alignment flags
        CGO_CFLAGS: "-O2 -DPAGE_SIZE=16384 -DMAX_PAGE_SIZE=16384"
        CGO_LDFLAGS: "-Wl,-z,max-page-size=16384,-z,common-page-size=16384"
        # Explicitly set NDK path
        ANDROID_NDK_HOME: "${{ env.ANDROID_SDK_ROOT }}/ndk/29.0.13599879"
      run: |
        # Create a custom build script that ensures 16KB page alignment
        cat > build_16kb.sh << 'EOF'
        #!/bin/bash
        set -e
        
        # Export environment variables for the build
        export CGO_ENABLED=1
        export CGO_CFLAGS="-O2 -DPAGE_SIZE=16384 -DMAX_PAGE_SIZE=16384"
        export CGO_LDFLAGS="-Wl,-z,max-page-size=16384,-z,common-page-size=16384"
        export GOMOBILE_LDFLAGS="-Wl,-z,max-page-size=16384,-z,common-page-size=16384"
        export ANDROID_NDK_HOME="${ANDROID_SDK_ROOT}/ndk/29.0.13599879"
        
        # Verify NDK path
        echo "Using NDK at: $ANDROID_NDK_HOME"
        ls -la "$ANDROID_NDK_HOME" || echo "NDK directory not found"
        
        # Build with gomobile using 16KB page alignment and proper API level
        gomobile bind -target=android/arm64,android/amd64 \
          -androidapi=21 \
          -ldflags="-linkmode=external -extldflags=-Wl,-z,max-page-size=16384,-z,common-page-size=16384" \
          -o libxray.aar \
          ./...
        
        # Alternative: use the Python build script with custom flags
        # python3 build/main.py android
        EOF
        
        chmod +x build_16kb.sh
        ./build_16kb.sh

    - name: Verify 16KB page alignment
      working-directory: libXray
      run: |
        # Check if the built libraries have proper 16KB alignment
        if [ -f "libxray.aar" ]; then
          echo "Checking AAR file structure..."
          unzip -l libxray.aar | head -20
          
          # Extract and check native libraries
          mkdir -p temp_check
          cd temp_check
          unzip -q ../libxray.aar
          
          # Check all .so files for proper alignment
          find . -name "*.so" -type f | while read sofile; do
            echo "Checking alignment for: $sofile"
            readelf -l "$sofile" | grep -E "(LOAD|INTERP)" || true
            # Check page alignment
            objdump -p "$sofile" | grep -E "(LOAD|file|align)" || true
          done
          
          cd ..
          rm -rf temp_check
        fi

    - name: Upload Android artifacts
      uses: actions/upload-artifact@v4
      with:
        name: libxray-android-16kb
        path: |
          libXray/*.aar
          libXray/*.jar

  build-ios:
    name: Build iOS
    runs-on: macos-14
    strategy:
      matrix:
        build-type: ['gomobile', 'go']
    steps:
    - name: Checkout libXray
      uses: actions/checkout@v4
      with:
        path: libXray

    - name: Checkout Xray-core
      uses: actions/checkout@v4
      with:
        repository: XTLS/Xray-core
        path: Xray-core

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        cache-dependency-path: |
          libXray/go.sum
          Xray-core/go.sum

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Set up Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable

    - name: Install iOS Simulator Runtime
      run: |
        sudo xcode-select -s /Applications/Xcode.app/Contents/Developer
        xcodebuild -downloadPlatform iOS

    - name: Install tvOS Simulator Runtime (for go build)
      if: matrix.build-type == 'go'
      run: |
        xcodebuild -downloadPlatform tvOS

    - name: Install gomobile
      if: matrix.build-type == 'gomobile'
      run: |
        go install golang.org/x/mobile/cmd/gomobile@latest
        gomobile init

    - name: Build iOS with gomobile
      if: matrix.build-type == 'gomobile'
      working-directory: libXray
      run: |
        python3 build/main.py apple gomobile

    - name: Build iOS with go
      if: matrix.build-type == 'go'
      working-directory: libXray
      run: |
        python3 build/main.py apple go

    - name: Upload iOS artifacts (gomobile)
      if: matrix.build-type == 'gomobile'
      uses: actions/upload-artifact@v4
      with:
        name: libxray-ios-gomobile
        path: |
          libXray/*.framework
          libXray/*.xcframework

    - name: Upload iOS artifacts (go)
      if: matrix.build-type == 'go'
      uses: actions/upload-artifact@v4
      with:
        name: libxray-ios-go
        path: |
          libXray/*.xcframework
          libXray/*.h

  create-release:
    name: Create Release
    needs: [build-android, build-ios]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Display structure of downloaded files
      run: ls -R

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          libxray-android-16kb/*
          libxray-ios-gomobile/*
          libxray-ios-go/*
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test-build:
    name: Test Build Process
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - name: Checkout libXray
      uses: actions/checkout@v4
      with:
        path: libXray

    - name: Checkout Xray-core
      uses: actions/checkout@v4
      with:
        repository: XTLS/Xray-core
        path: Xray-core

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Verify build script
      working-directory: libXray
      run: |
        python3 -c "import build.main; print('Build script syntax OK')"

    - name: Check dependencies
      working-directory: libXray
      run: |
        go mod download
        go mod verify

    - name: Test 16KB page build configuration
      working-directory: libXray
      run: |
        # Test if the build environment supports 16KB page configuration
        echo "Testing 16KB page build environment..."
        export CGO_CFLAGS="-DPAGE_SIZE=16384"
        export CGO_LDFLAGS="-Wl,-z,max-page-size=16384"
        echo "16KB page build environment configured successfully"

    - name: Run tests (if any)
      working-directory: libXray
      run: |
        if [ -f "go.mod" ]; then
          go test ./... || echo "No tests found or tests failed"
        fi
