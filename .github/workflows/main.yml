name: Build LibXray for Android and iOS

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-android:
    name: Build Android (16KB Page Size)
    runs-on: ubuntu-latest
    steps:
    - name: Checkout libXray
      uses: actions/checkout@v4
      with:
        path: libXray

    - name: Checkout Xray-core
      uses: actions/checkout@v4
      with:
        repository: XTLS/Xray-core
        path: Xray-core

    # Use a dedicated action to ensure QEMU is set up robustly.
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24.x'
        cache-dependency-path: |
          libXray/go.sum
          Xray-core/go.sum

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Set up Java JDK
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Setup Android SDK and NDK
      uses: android-actions/setup-android@v3
      with:
        ndk-version: 26.1.10909125

    - name: Install build essentials
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y --no-install-recommends build-essential binutils unzip
      
    - name: Install and initialize gomobile
      run: |
        go install golang.org/x/mobile/cmd/gomobile@latest
        gomobile init

    - name: Build Android AAR
      working-directory: libXray
      env:
        GOMOBILE_LDFLAGS: "-Wl,-z,max-page-size=16384,-z,common-page-size=16384"
      run: |
        # CORRECTED: Use a more standard cross-compilation setup by adding the NDK toolchain to the PATH
        # and using the --target flag. This avoids toolchain conflicts that cause assembly errors.
        export NDK_TOOLCHAIN="${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin"
        export PATH="${NDK_TOOLCHAIN}:${PATH}"

        API_LEVEL=21
        TARGET_TRIPLE="aarch64-linux-android"

        export CC="clang"
        export CXX="clang++"
        export AR="llvm-ar"

        export CGO_CFLAGS="\
        -DPAGE_SIZE=16384 \
        -DMAX_PAGE_SIZE=16384 \
        -fPIC \
        --target=${TARGET_TRIPLE}${API_LEVEL}"
        
        export CGO_LDFLAGS="-Wl,-z,max-page-size=16384,-z,common-page-size=16384"

        echo "=== Starting Build with Toolchain in PATH ==="
        which clang
        python3 build/main.py android
        
        echo "=== Verifying build output ==="
        if [ ! -f "libxray.aar" ]; then
          echo "::error::Build failed: libxray.aar was not created."
          exit 1
        fi
        echo "Successfully created libxray.aar:"
        ls -l libxray.aar

    - name: Verify 16KB page alignment
      working-directory: libXray
      run: |
        echo "Verifying libxray.aar..."
        unzip -l libxray.aar
        
        mkdir -p temp_check && cd temp_check
        unzip -q ../libxray.aar
        
        # Check all .so files for correct page size alignment
        find . -name "*.so" -type f | while read sofile; do
          echo "--- Checking alignment for: $sofile"
          # Use readelf (from binutils) to check the alignment of program headers
          readelf -l "$sofile" | grep -A1 "LOAD" | grep "p_align"
        done
        cd .. && rm -rf temp_check

    - name: Upload Android artifacts
      uses: actions/upload-artifact@v4
      with:
        name: libxray-android-16kb
        path: |
          libXray/*.aar
          libXray/*.jar

  build-ios:
    name: Build iOS (${{ matrix.build-type }})
    runs-on: macos-14
    strategy:
      matrix:
        build-type: ['gomobile', 'go']
    steps:
    - name: Checkout libXray
      uses: actions/checkout@v4
      with:
        path: libXray

    - name: Checkout Xray-core
      uses: actions/checkout@v4
      with:
        repository: XTLS/Xray-core
        path: Xray-core

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24.x'
        cache-dependency-path: |
          libXray/go.sum
          Xray-core/go.sum

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Select latest stable Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable

    - name: Install and initialize gomobile
      if: matrix.build-type == 'gomobile'
      run: |
        go install golang.org/x/mobile/cmd/gomobile@latest
        gomobile init

    - name: Build iOS
      working-directory: libXray
      run: |
        python3 build/main.py apple ${{ matrix.build-type }}

    - name: Upload iOS artifacts
      uses: actions/upload-artifact@v4
      with:
        name: libxray-ios-${{ matrix.build-type }}
        path: |
          libXray/*.xcframework
          libXray/*.framework
          libXray/*.h
        if-no-files-found: ignore

  create-release:
    name: Create Release
    needs: [build-android, build-ios]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Display structure of downloaded files
      run: ls -R

    - name: Create Release and Upload Artifacts
      uses: softprops/action-gh-release@v2
      with:
        files: |
          libxray-android-16kb/*
          libxray-ios-gomobile/*
          libxray-ios-go/*
        generate_release_notes: true
      # The GITHUB_TOKEN is automatically available to this action
