name: Build libXray for Android

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-android:
    runs-on: ubuntu-latest
    
    env:
      GO_VERSION: "1.24"
      NDK_VERSION: "29.0.13599879"
      ANDROID_API_LEVEL: "34"
      
    steps:
    - name: Checkout libXray
      uses: actions/checkout@v4
      with:
        path: libXray
        
    - name: Checkout Xray-core
      uses: actions/checkout@v4
      with:
        repository: XTLS/Xray-core
        path: Xray-core
        
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Setup Android NDK
      uses: nttld/setup-ndk@v1
      with:
        ndk-version: ${{ env.NDK_VERSION }}
        
    - name: Set up Android SDK
      uses: android-actions/setup-android@v3
      with:
        api-level: ${{ env.ANDROID_API_LEVEL }}
        
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
          
    - name: Install gomobile
      run: |
        go install golang.org/x/mobile/cmd/gomobile@latest
        go install golang.org/x/mobile/cmd/gobind@latest
        gomobile init
        
    - name: Set environment variables
      run: |
        echo "ANDROID_HOME=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
        echo "ANDROID_NDK_HOME=$ANDROID_NDK_ROOT" >> $GITHUB_ENV
        echo "NDK_ROOT=$ANDROID_NDK_ROOT" >> $GITHUB_ENV
        echo "PATH=$PATH:$(go env GOPATH)/bin" >> $GITHUB_ENV
        
    - name: Verify environment
      run: |
        echo "Go version: $(go version)"
        echo "Python version: $(python3 --version)"
        echo "ANDROID_HOME: $ANDROID_HOME"
        echo "ANDROID_NDK_HOME: $ANDROID_NDK_HOME"
        echo "NDK_ROOT: $NDK_ROOT"
        ls -la $ANDROID_NDK_ROOT/
        which gomobile
        gomobile version
        
    - name: Build libXray for Android
      working-directory: ./libXray
      run: |
        # Ensure we're in the correct directory structure
        cd ..
        ls -la
        
        # Run the build script
        cd libXray
        python3 build/main.py android
        
    - name: List build outputs
      run: |
        find . -name "*.aar" -o -name "*.so" -o -name "*.a" | head -20
        
    - name: Upload Android artifacts
      uses: actions/upload-artifact@v4
      with:
        name: libxray-android-${{ github.sha }}
        path: |
          libXray/**/*.aar
          libXray/**/*.so
          libXray/**/*.a
        retention-days: 30
        
  build-android-architectures:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [arm, arm64, x86, x86_64]
        
    env:
      GO_VERSION: "1.24"
      NDK_VERSION: "29.0.13599879"
      
    steps:
    - name: Checkout libXray
      uses: actions/checkout@v4
      with:
        path: libXray
        
    - name: Checkout Xray-core
      uses: actions/checkout@v4
      with:
        repository: XTLS/Xray-core
        path: Xray-core
        
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Setup Android NDK
      uses: nttld/setup-ndk@v1
      with:
        ndk-version: ${{ env.NDK_VERSION }}
        
    - name: Install gomobile
      run: |
        go install golang.org/x/mobile/cmd/gomobile@latest
        go install golang.org/x/mobile/cmd/gobind@latest
        gomobile init
        
    - name: Set environment variables
      run: |
        echo "ANDROID_NDK_HOME=$ANDROID_NDK_ROOT" >> $GITHUB_ENV
        echo "NDK_ROOT=$ANDROID_NDK_ROOT" >> $GITHUB_ENV
        echo "PATH=$PATH:$(go env GOPATH)/bin" >> $GITHUB_ENV
        
        # Set architecture-specific variables
        case "${{ matrix.arch }}" in
          arm)
            echo "GOARCH=arm" >> $GITHUB_ENV
            echo "GOOS=android" >> $GITHUB_ENV
            echo "CC=$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi34-clang" >> $GITHUB_ENV
            echo "CXX=$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi34-clang++" >> $GITHUB_ENV
            ;;
          arm64)
            echo "GOARCH=arm64" >> $GITHUB_ENV
            echo "GOOS=android" >> $GITHUB_ENV
            echo "CC=$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android34-clang" >> $GITHUB_ENV
            echo "CXX=$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android34-clang++" >> $GITHUB_ENV
            ;;
          x86)
            echo "GOARCH=386" >> $GITHUB_ENV
            echo "GOOS=android" >> $GITHUB_ENV
            echo "CC=$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/i686-linux-android34-clang" >> $GITHUB_ENV
            echo "CXX=$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/i686-linux-android34-clang++" >> $GITHUB_ENV
            ;;
          x86_64)
            echo "GOARCH=amd64" >> $GITHUB_ENV
            echo "GOOS=android" >> $GITHUB_ENV
            echo "CC=$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/x86_64-linux-android34-clang" >> $GITHUB_ENV
            echo "CXX=$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/x86_64-linux-android34-clang++" >> $GITHUB_ENV
            ;;
        esac
        
    - name: Build libXray for Android (${{ matrix.arch }})
      working-directory: ./libXray
      run: |
        echo "Building for architecture: ${{ matrix.arch }}"
        echo "GOARCH: $GOARCH"
        echo "GOOS: $GOOS"
        echo "CC: $CC"
        echo "CXX: $CXX"
        
        # Build with the Python script
        cd ..
        cd libXray
        python3 build/main.py android
        
    - name: Upload artifacts for ${{ matrix.arch }}
      uses: actions/upload-artifact@v4
      with:
        name: libxray-android-${{ matrix.arch }}-${{ github.sha }}
        path: |
          libXray/**/*.aar
          libXray/**/*.so
          libXray/**/*.a
        retention-days: 30
        
  create-release:
    needs: [build-android, build-android-architectures]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
        
    - name: Create release package
      run: |
        mkdir -p release
        find artifacts -name "*.aar" -exec cp {} release/ \;
        find artifacts -name "*.so" -exec cp {} release/ \;
        find artifacts -name "*.a" -exec cp {} release/ \;
        
        # Create a tar.gz with all artifacts
        tar -czf libxray-android-build-${{ github.sha }}.tar.gz -C release .
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: |
          libxray-android-build-${{ github.sha }}.tar.gz
          release/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
